---
title: "Lab 7"
author: "Kyle Bistrain"
format:
  html:
    self-contained: true
    mainfont: Times New Roman
    code-fold: true
    code-summary: "show the code"
editor: visual
execute:
 echo: true
 error: true
---

```{r setup}
#| warning: false
library(tidyverse)
library(gridExtra)

```

```{r}
#| warning: false
fish <- read_csv(here::here("supporting_artifacts",
                            "learning targets",
                            "BlackfootFish.csv"))
```

**1.Task one**

```{r}
  sum.na <- function(x) {
    sum(is.na(x))
  }
    
  fish |> 
    summarise(across(.cols = everything(), 
                     .fns = ~sum.na(.)
                     )
              ) 
 
    

```

-   How many observations have missing values?

    1796

-   What variable(s) have missing values present?

    Weight has missing values.

### **2. Task 2 -- Visualizing Missing Data**

Unfortunately, these missing values are not for only one `year`, `trip`, or `section` of river.

Create a thoughtful visualization exploring the frequency of missing values across the different years, sections, and trips.

```{r}

fish |> 
  mutate(trip = if_else(trip == 2, "Trip 2", "Trip 1")) |> 
  group_by(trip, section, year) |> 
  summarise(sum = sum(is.na(weight)), 
            .groups = "drop") |> 
  ggplot(mapping = aes(x = year ,
                       y = sum, 
                       fill = section, 
                       postion = "dodge"
                       )
         ) +
  geom_col() +
  facet_wrap(~trip) +
  labs(x = "Year", 
       y = "",
       fill = "Section of River", 
       title = "Number of NA Weight Observations"
       )
  
```

## **3. Part Two: Adjusting the Data (Function Writing)**

Let's transform the repeated process above into a `rescale_01()` function.

-   The function should take a single vector as its input.

-   The function should return the rescaled vector.

*Think about the "efficiency" of your function. Are you calling the **same** function multiple times?*

### **4. Task 2 -- Adding Stops**

Now, let's incorporate some checks into your function! Modify your previous code to create the following checks:

-   the function should stop if the input vector is not numeric

-   the function should stop if the length of the vector is not greater than 1

*No need to write code here, simply add these stops to your code from Task 1!*

```{r}
rescale_01 <- function(vec) {
  stopifnot(is.numeric(vec),
            length(vec) > 1
            )
  r <- range(vec, na.rm = TRUE)
  num <- vec - r[1]
  denom <- r[2] - r[1]
  vec <- num/denom 
  return(vec)
}
```

### **5. Task 3 - Performing a Simple Test**

First, test your function on the simple vector below. Verify that the maximum of your rescaled vector is 1 and the minimum is 0!

```{r}
x <- c(1:25, NA)
rescale_01(x)

```

### **6. Task 4 - Performing a More Difficult Test**

Next, let's test the function on the `length` column of the `BlackfootFish` dataset.

Make plots of the original values of `length` and the rescaled values of `length`. Output your plots side-by-side, so the reader can confirm the only aspect that has changed is the scale.

```{r}
ggp1 <- ggplot(data = fish) +
  geom_density(
    aes( x = weight), 
    na.rm = TRUE) +
  labs(y = "", 
       x = "Weight",
       title = "density"
       )
ggp2 <- ggplot(data = fish) +
  geom_density(
    aes(x = rescale_01(weight)), 
    na.rm = TRUE) +
    labs(y = "", 
         x = "rescaled weight",
         title = "density"
         )
grid.arrange(ggp1, ggp2, ncol = 2)     
```

source: https://statisticsglobe.com/draw-multiple-ggplot-plots-side-by-side

### **7. Task 5 -- Incorportaing Variables**

Suppose you would like for your `rescale()` function to perform operations on a variable within a dataset. Ideally, your function would take a dataframe and a variable name as inputs and return a dataframe where the variable has been rescaled.

Create a `rescale_column()` that accepts two arguments, (1) a dataframe, and (2) the name(s) of the variable(s) to be rescaled. The body of the function should call the original `rescale_01()` function you wrote previously.

```{r}
rescale_column <- function(dtframe, vars) {
    stopifnot(is.data.frame(dtframe))
    dtframe <- dtframe |> 
      mutate( across(.cols = {{ vars }}, .fns = rescale_01))
  return (dtframe)
}

```

### **8. Task 6 -- Another Function Test**

Alright, now let's put your `rescale_column()` function to work! Use your `rescale_column()` function to rescale **both** the `length` and `weight` columns.

**I expect that you carry out this process by calling the `rescale()` function *one* time!**

```{r}
rescale_column(fish,`length`:`weight`) 


```
